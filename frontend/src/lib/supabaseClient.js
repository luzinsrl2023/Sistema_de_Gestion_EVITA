import { createClient } from '@supabase/supabase-js';
import config from '../config/environment';

// Configuraci√≥n de Supabase usando el archivo de configuraci√≥n
const supabaseUrl = config.supabaseUrl;
const supabaseAnonKey = config.supabaseAnonKey;

// Logs de depuraci√≥n para producci√≥n
console.log('üîç DEBUG: Environment check:', {
  isProduction: import.meta.env.PROD,
  hasEnvUrl: !!import.meta.env.VITE_SUPABASE_URL,
  hasEnvKey: !!import.meta.env.VITE_SUPABASE_ANON_KEY,
  finalUrl: supabaseUrl,
  finalKeyLength: supabaseAnonKey?.length || 0
});

// Configuraci√≥n del cliente con opciones mejoradas para manejo de errores
const supabaseOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
};

// Crear cliente de Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey, supabaseOptions);

// Funci√≥n para verificar la conexi√≥n
export const checkSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('usuarios_app').select('count').limit(1);
    if (error) {
      console.error('Error de conexi√≥n a Supabase:', error);
      return false;
    }
    console.log('‚úÖ Conexi√≥n a Supabase exitosa');
    return true;
  } catch (err) {
    console.error('‚ùå Error de conexi√≥n a Supabase:', err);
    return false;
  }
};

// Verificar conexi√≥n al inicializar
if (import.meta.env.PROD) {
  checkSupabaseConnection();
}
